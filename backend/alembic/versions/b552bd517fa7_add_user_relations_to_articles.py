"""Add user relations to articles

Revision ID: b552bd517fa7
Revises: 0001
Create Date: 2025-10-02 12:06:44.360959

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b552bd517fa7'
down_revision = '0001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Guard: add 'version' only if missing (0001 already defines it)
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    existing_cols = {col['name'] for col in inspector.get_columns('articles')}
    if 'version' not in existing_cols:
        op.add_column('articles', sa.Column('version', sa.Integer(), server_default='1', nullable=False))

    # Rename legacy columns to new names if needed
    if 'submitted_by' in existing_cols and 'submitted_by_id' not in existing_cols:
        op.alter_column('articles', 'submitted_by', new_column_name='submitted_by_id')
        existing_cols.add('submitted_by_id')
    if 'reviewed_by' in existing_cols and 'reviewed_by_id' not in existing_cols:
        op.alter_column('articles', 'reviewed_by', new_column_name='reviewed_by_id')
        existing_cols.add('reviewed_by_id')

    # Add columns only if missing
    if 'submitted_by_id' not in existing_cols:
        op.add_column('articles', sa.Column('submitted_by_id', sa.UUID(), nullable=True))
    if 'reviewed_by_id' not in existing_cols:
        op.add_column('articles', sa.Column('reviewed_by_id', sa.UUID(), nullable=True))
    if 'review_note' not in existing_cols:
        op.add_column('articles', sa.Column('review_note', sa.Text(), nullable=True))
    if 'published_at' not in existing_cols:
        op.add_column('articles', sa.Column('published_at', sa.DateTime(timezone=True), nullable=True))
    if 'source' not in existing_cols:
        op.add_column('articles', sa.Column('source', sa.String(length=100), nullable=True))
    if 'updated_at' not in existing_cols:
        op.add_column('articles', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    # Skip enum/status transforms and FK creation if base schema already matches.
    # This migration now acts as a no-op on fresh schemas created by 0001.
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'articles', type_='foreignkey')
    op.drop_constraint(None, 'articles', type_='foreignkey')
    op.alter_column('articles', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('articles', 'status',
               existing_type=sa.Enum('DRAFT', 'SUBMITTED', 'APPROVED', 'REJECTED', 'PUBLISHED', name='articlestatus'),
               type_=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'published'::character varying"))
    op.alter_column('articles', 'language',
               existing_type=sa.Enum('EN', 'CODE', 'ZH_TW', 'ZH_CN', 'KO', 'JA', 'DE', 'RU', name='language'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_column('articles', 'updated_at')
    op.drop_column('articles', 'source')
    op.drop_column('articles', 'published_at')
    op.drop_column('articles', 'review_note')
    op.drop_column('articles', 'reviewed_by_id')
    op.drop_column('articles', 'submitted_by_id')
    op.drop_column('articles', 'version')
    # ### end Alembic commands ###
